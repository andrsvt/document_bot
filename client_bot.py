#!/usr/bin/env python3
import logging
import sqlite3
import random
import string
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('/opt/bots/bot.log'),
        logging.StreamHandler()
    ]
)
DB_PATH = '/opt/bots/documents.db'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
EMAIL_VERIFICATION = 1

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
from secrets import BOT_TOKEN_CLIENT, EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD, LAWYERS

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è email
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è PDF —à—Ç–∞–º–ø–æ–≤
from pdf_stamp import add_signature_to_pdf

def generate_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

def send_email(to_email, code, user_name=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = MIMEMultipart()
        message['From'] = EMAIL_USER
        message['To'] = to_email
        
        if user_name:
            message['Subject'] = "–ö–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            body = f"""–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {user_name}!

üîê –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {code}

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç

üìÑ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞"""
        else:
            message['Subject'] = "–ö–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            body = f"""üîê –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {code}

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç

üìÑ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        message.attach(MIMEText(body, 'plain', 'utf-8'))
        
        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            server.send_message(message)
        
        logging.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {to_email}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏!\n\n"
        "üìß –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    )
    
    return EMAIL_VERIFICATION

async def email_verification_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∫–ª–∏–µ–Ω—Ç–æ–º"""
    email = update.message.text.strip().lower()
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
        cursor.execute("SELECT id, full_name FROM clients WHERE email = ?", (email,))
        client_data = cursor.fetchone()
        
        if not client_data:
            keyboard = [
                [InlineKeyboardButton("üìû –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/your_support")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå Email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ Email –≤–≤–µ–¥–µ–Ω —Å –æ—à–∏–±–∫–æ–π\n"
                "‚Ä¢ –ê–¥–≤–æ–∫–∞—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –∞–¥–≤–æ–∫–∞—Ç—É",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        client_id, client_name = client_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        context.user_data['client_id'] = client_id
        context.user_data['client_name'] = client_name
        context.user_data['client_email'] = email
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        cursor.execute('''
            SELECT COUNT(*) FROM documents 
            WHERE client_id = ? AND lawyer_signed = 1 AND client_signed = 0
        ''', (client_id,))
        doc_count = cursor.fetchone()[0]
        
        if doc_count > 0:
            keyboard = [
                [InlineKeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data=f"view_doc_{client_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {client_name}!\n"
                f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {doc_count}",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {client_name}!\n"
                f"üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –≤–∞—à–µ–≥–æ –∞–¥–≤–æ–∫–∞—Ç–∞."
            )
        
        return ConversationHandler.END
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        conn.close()

async def view_document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
    client_id = int(query.data.replace('view_doc_', ''))
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT d.id, d.file_path, c.full_name, c.email, d.document_hash
            FROM documents d 
            JOIN clients c ON d.client_id = c.id 
            WHERE d.client_id = ? AND d.lawyer_signed = 1 AND d.client_signed = 0
            ORDER BY d.created_at DESC 
            LIMIT 1
        ''', (client_id,))
        
        doc_data = cursor.fetchone()
        
        if not doc_data:
            await query.edit_message_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
            return
        
        doc_id, file_path, client_name, client_email, document_hash = doc_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        context.user_data['current_doc_id'] = doc_id
        context.user_data['client_email'] = client_email
        context.user_data['client_name'] = client_name
        context.user_data['document_hash'] = document_hash
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        await query.edit_message_text(
            f"üìã –î–æ–∫—É–º–µ–Ω—Ç: –°–æ–≥–ª–∞—à–µ–Ω–∏–µ\n"
            f"üë§ –î–ª—è: {client_name}\n"
            f"üìß Email: {client_email}\n"
            f"üîê ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_hash}\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –∞–¥–≤–æ–∫–∞—Ç–æ–º\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∏\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç..."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
        with open(file_path, 'rb') as doc_file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=doc_file,
                filename=f"document_{doc_id}.pdf",
                caption="üìÑ –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏"
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∏
        keyboard = [
            [InlineKeyboardButton("üñä –ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data=f"client_sign_{doc_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–ø–∏—Å–∏",
            reply_markup=reply_markup
        )
        
    except FileNotFoundError:
        await query.edit_message_text("‚ùå –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    finally:
        conn.close()

async def client_sign_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_id = int(query.data.replace('client_sign_', ''))
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT c.email, c.full_name 
            FROM clients c 
            JOIN documents d ON c.id = d.client_id 
            WHERE d.id = ?
        ''', (doc_id,))
        
        client_data = cursor.fetchone()
        
        if not client_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        client_email, client_name = client_data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = generate_code()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–∞
        if send_email(client_email, code, client_name):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            expires_at = datetime.now().timestamp() + 600  # 10 –º–∏–Ω—É—Ç
            
            cursor.execute('''
                INSERT INTO signature_codes 
                (document_id, user_type, code, expires_at) 
                VALUES (?, ?, ?, datetime(?, 'unixepoch'))
            ''', (doc_id, 'client', code, expires_at))
            conn.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
            context.user_data['current_doc_id'] = doc_id
            context.user_data['current_user_type'] = 'client'
            context.user_data['client_name'] = client_name
            
            await query.edit_message_text(
                f"üìß –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {client_email}\n\n"
                f"üîê –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∑–¥–µ—Å—å:\n"
                f"(–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç)\n\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {client_name}"
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"client_sign_{doc_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        conn.close()

async def verify_client_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∫–æ–¥
    if 'current_doc_id' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        return
    
    entered_code = update.message.text.strip().upper()
    doc_id = context.user_data['current_doc_id']
    user_type = context.user_data['current_user_type']
    client_name = context.user_data.get('client_name', '–∫–ª–∏–µ–Ω—Ç')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT code, expires_at, attempts 
            FROM signature_codes 
            WHERE document_id = ? AND user_type = ?
            ORDER BY created_at DESC 
            LIMIT 1
        ''', (doc_id, user_type))
        
        code_data = cursor.fetchone()
        
        if not code_data:
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return
        
        expected_code, expires_at, attempts = code_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > datetime.strptime(expires_at, '%Y-%m-%d %H:%M:%S'):
            await update.message.reply_text("‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if entered_code == expected_code:
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–º
            cursor.execute(
                "UPDATE documents SET client_signed = 1 WHERE id = ?",
                (doc_id,)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à—Ç–∞–º–ø–∞
            cursor.execute('''
                SELECT d.file_path, d.document_hash 
                FROM documents d 
                WHERE d.id = ?
            ''', (doc_id,))
            
            stamp_data = cursor.fetchone()
            
            if stamp_data:
                file_path, document_hash = stamp_data
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–≤–æ–∫–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ LAWYERS
                lawyer_name = list(LAWYERS.values())[0]['full_name'] if LAWYERS else "–ê–¥–≤–æ–∫–∞—Ç"
                lawyer_sign_date = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                
                lawyer_data = cursor.fetchone()
                lawyer_name = lawyer_data[0] if lawyer_data else "–ê–¥–≤–æ–∫–∞—Ç"
                lawyer_sign_date = lawyer_data[1] if lawyer_data else datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à—Ç–∞–º–ø–∞
                signature_data = {
                    'document_hash': document_hash,
                    'lawyer_signed': True,
                    'lawyer_name': lawyer_name,
                    'lawyer_sign_date': lawyer_sign_date,
                    'client_signed': True,
                    'client_name': client_name,
                    'client_sign_date': datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç–∞–º–ø –≤ PDF
                try:
                    final_file_path = file_path.replace('.pdf', '_final.pdf')
                    if add_signature_to_pdf(file_path, signature_data, final_file_path):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ
                        cursor.execute(
                            "UPDATE documents SET file_path = ? WHERE id = ?",
                            (final_file_path, doc_id)
                        )
                        logging.info(f"–®—Ç–∞–º–ø –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç {doc_id}")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—Ç–∞–º–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç {doc_id}")
                        
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—Ç–∞–º–ø–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ —à—Ç–∞–º–ø –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            cursor.execute("SELECT file_path FROM documents WHERE id = ?", (doc_id,))
            file_path = cursor.fetchone()[0]
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω!\n\n"
                f"üë§ {client_name}, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
                f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            with open(file_path, 'rb') as doc_file:
                await update.message.reply_document(
                    document=doc_file,
                    filename=f"–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π_–¥–æ–∫—É–º–µ–Ω—Ç_{doc_id}.pdf",
                    caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –≤–∞–º–∏ –∏ –∞–¥–≤–æ–∫–∞—Ç–æ–º"
                )
            
            await update.message.reply_text(
                "üéâ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            cursor.execute(
                "UPDATE signature_codes SET attempts = attempts + 1 WHERE document_id = ? AND user_type = ?",
                (doc_id, user_type)
            )
            conn.commit()
            
            remaining_attempts = 3 - (attempts + 1)
            
            if remaining_attempts > 0:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—ã—Ç–æ–∫: {attempts + 1}/3\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑:"
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥", callback_data=f"client_sign_{doc_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n"
                    "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.",
                    reply_markup=reply_markup
                )
                context.user_data.clear()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        conn.close()

def main():
    application = Application.builder().token(BOT_TOKEN_CLIENT).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            EMAIL_VERIFICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, email_verification_handler)],
        },
        fallbacks=[]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(view_document_handler, pattern='^view_doc_'))
    application.add_handler(CallbackQueryHandler(client_sign_handler, pattern='^client_sign_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        verify_client_code_handler
    ))
    
    print("–ë–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
