#!/usr/bin/env python3
import logging
import sqlite3
import re
import os
import smtplib
import random
import string
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('/opt/bots/bot.log'),
        logging.StreamHandler()
    ]
)
DB_PATH = '/opt/bots/documents.db'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
EMAIL, FULL_NAME, DOCUMENT = range(3)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
from secrets import BOT_TOKEN_LAWYER, LAWYERS, EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è email
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è PDF —à—Ç–∞–º–ø–æ–≤
from pdf_stamp import add_signature_to_pdf, generate_document_hash, update_document_hash_in_db

def check_lawyer_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∞–¥–≤–æ–∫–∞—Ç–∞"""
    return user_id in LAWYERS

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    conn.execute("PRAGMA foreign_keys = ON")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É clients –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            full_name TEXT NOT NULL,
            client_code TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É documents –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS documents (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER,
            file_path TEXT NOT NULL,
            lawyer_signed BOOLEAN DEFAULT 0,
            client_signed BOOLEAN DEFAULT 0,
            document_hash TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (client_id) REFERENCES clients (id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–¥–æ–≤ –ø–æ–¥–ø–∏—Å–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS signature_codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            document_id INTEGER,
            user_type TEXT,
            code TEXT,
            attempts INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            expires_at DATETIME,
            FOREIGN KEY (document_id) REFERENCES documents (id)
        )
    ''')
    
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def generate_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

def send_email(to_email, code, client_name=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ email"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = MIMEMultipart()
        message['From'] = EMAIL_USER
        message['To'] = to_email
        
        if client_name:
            message['Subject'] = "–ö–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            body = f"""–ö–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º {client_name}:

üîê –í–∞—à –∫–æ–¥: {code}

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç

üìÑ –î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
        else:
            message['Subject'] = "–ö–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            body = f"""üîê –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {code}

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç

üìÑ –î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        message.attach(MIMEText(body, 'plain', 'utf-8'))
        
        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            server.send_message(message)
        
        logging.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.message.from_user.id
    
    if not check_lawyer_access(user_id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="add_client")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_lawyer_access(user_id):
        await query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if query.data == "add_client":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ email –∫–ª–∏–µ–Ω—Ç–∞:")
        return EMAIL
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return ConversationHandler.END

async def email_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email"""
    email = update.message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        await update.message.reply_text("‚ùå Email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return EMAIL
    
    context.user_data['email'] = email
    
    await update.message.reply_text("‚úÖ Email –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
    return FULL_NAME

async def full_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    full_name = update.message.text.strip()
    
    if len(full_name) < 2:
        await update.message.reply_text("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return FULL_NAME
    
    context.user_data['full_name'] = full_name
    
    await update.message.reply_text("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (PDF) –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:")
    return DOCUMENT

async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if not update.message.document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª:")
        return DOCUMENT
    
    document = update.message.document
    
    if document.mime_type != 'application/pdf':
        await update.message.reply_text("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return DOCUMENT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 20MB)
    if document.file_size > 20 * 1024 * 1024:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 20MB). –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª:")
        return DOCUMENT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –±–∞–∑—É
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ email
        cursor.execute("SELECT id FROM clients WHERE email = ?", (context.user_data['email'],))
        existing_client = cursor.fetchone()
        
        if existing_client:
            client_id = existing_client[0]
            # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute("UPDATE clients SET full_name = ? WHERE id = ?", 
                         (context.user_data['full_name'], client_id))
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç: {client_id}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            cursor.execute(
                "INSERT INTO clients (email, full_name) VALUES (?, ?)",
                (context.user_data['email'], context.user_data['full_name'])
            )
            client_id = cursor.lastrowid
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {client_id}")
        
        conn.commit()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('/opt/bots/documents', exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        file = await document.get_file()
        file_name = f"{client_id}_{document.file_name}"
        file_path = f"/opt/bots/documents/{file_name}"
        
        await file.download_to_drive(file_path)
        logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_hash = generate_document_hash(client_id, document.file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É
        cursor.execute(
            "INSERT INTO documents (client_id, file_path, document_hash) VALUES (?, ?, ?)",
            (client_id, file_path, document_hash)
        )
        document_id = cursor.lastrowid
        conn.commit()
        
        logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∏
        keyboard = [[InlineKeyboardButton("üñä –ü–æ–¥–ø–∏—Å–∞—Ç—å", callback_data=f"sign_{document_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {context.user_data['full_name']}\n"
            f"üìß Email: {context.user_data['email']}\n"
            f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}\n"
            f"üîê –•–µ—à –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_hash[:16]}...",
            reply_markup=reply_markup
        )
        
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    finally:
        conn.close()
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END

async def sign_document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not check_lawyer_access(user_id):
        await query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ callback_data (sign_123 ‚Üí 123)
    document_id = int(query.data.replace('sign_', ''))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT c.email, c.full_name, d.file_path 
            FROM clients c 
            JOIN documents d ON c.id = d.client_id 
            WHERE d.id = ?
        ''', (document_id,))
        document_data = cursor.fetchone()
        
        if not document_data:
            await query.edit_message_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        client_email, client_name, file_path = document_data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = generate_code()
        lawyer_info = LAWYERS[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email –∞–¥–≤–æ–∫–∞—Ç–∞
        if send_email(lawyer_info['email'], code, client_name):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            expires_at = datetime.now().timestamp() + 600  # 10 –º–∏–Ω—É—Ç
            
            cursor.execute('''
                INSERT INTO signature_codes 
                (document_id, user_type, code, expires_at) 
                VALUES (?, ?, ?, datetime(?, 'unixepoch'))
            ''', (document_id, 'lawyer', code, expires_at))
            conn.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
            context.user_data['current_document_id'] = document_id
            context.user_data['current_user_type'] = 'lawyer'
            
            await query.edit_message_text(
                f"üìß –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {lawyer_info['email']}\n\n"
                f"üîê –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∑–¥–µ—Å—å:\n"
                f"(–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç)"
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        conn.close()

async def verify_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    user_id = update.message.from_user.id
    
    if not check_lawyer_access(user_id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∫–æ–¥
    if 'current_document_id' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        return
    
    entered_code = update.message.text.strip().upper()
    document_id = context.user_data['current_document_id']
    user_type = context.user_data['current_user_type']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT code, expires_at, attempts 
            FROM signature_codes 
            WHERE document_id = ? AND user_type = ?
            ORDER BY created_at DESC 
            LIMIT 1
        ''', (document_id, user_type))
        
        code_data = cursor.fetchone()
        
        if not code_data:
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return
        
        expected_code, expires_at, attempts = code_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > datetime.strptime(expires_at, '%Y-%m-%d %H:%M:%S'):
            await update.message.reply_text("‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if entered_code == expected_code:
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            cursor.execute(
                "UPDATE documents SET lawyer_signed = 1 WHERE id = ?",
                (document_id,)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à—Ç–∞–º–ø–∞
            cursor.execute('''
                SELECT d.file_path, d.document_hash, c.full_name 
                FROM documents d 
                JOIN clients c ON d.client_id = c.id 
                WHERE d.id = ?
            ''', (document_id,))
            
            stamp_data = cursor.fetchone()
            
            lawyer_info = LAWYERS[user_id]
            
            if stamp_data:
                file_path, document_hash, client_name = stamp_data
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à—Ç–∞–º–ø–∞
                signature_data = {
                    'document_hash': document_hash,
                    'lawyer_signed': True,
                    'lawyer_name': lawyer_info['full_name'],
                    'lawyer_sign_date': datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                    'client_signed': False,
                    'client_name': client_name
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç–∞–º–ø –≤ PDF
                try:
                    signed_file_path = file_path.replace('.pdf', '_signed.pdf')
                    if add_signature_to_pdf(file_path, signature_data, signed_file_path):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ
                        cursor.execute(
                            "UPDATE documents SET file_path = ? WHERE id = ?",
                            (signed_file_path, document_id)
                        )
                        logging.info(f"–®—Ç–∞–º–ø –∞–¥–≤–æ–∫–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç {document_id}")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—Ç–∞–º–ø–∞ –∞–¥–≤–æ–∫–∞—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç {document_id}")
                        
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—Ç–∞–º–ø–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ —à—Ç–∞–º–ø –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('''
                SELECT c.full_name 
                FROM clients c 
                JOIN documents d ON c.id = d.client_id 
                WHERE d.id = ?
            ''', (document_id,))
            client_data = cursor.fetchone()
            client_name = client_data[0] if client_data else "–∫–ª–∏–µ–Ω—Ç–∞"
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω!\n\n"
                f"üë§ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è {client_name} –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—É.\n"
                f"üìÑ –®—Ç–∞–º–ø —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            cursor.execute(
                "UPDATE signature_codes SET attempts = attempts + 1 WHERE document_id = ? AND user_type = ?",
                (document_id, user_type)
            )
            conn.commit()
            
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—ã—Ç–æ–∫: {attempts + 1}/3\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑:"
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        conn.close()

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_database()
    
    application = Application.builder().token(BOT_TOKEN_LAWYER).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^add_client$')],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email_handler)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, full_name_handler)],
            DOCUMENT: [MessageHandler(filters.Document.PDF, document_handler)],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏
    code_handler = MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        verify_code_handler
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(sign_document_handler, pattern='^sign_'))
    application.add_handler(code_handler)
    
    print("–ë–æ—Ç –∞–¥–≤–æ–∫–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
